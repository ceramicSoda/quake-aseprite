local qPalHex = {
    0x000000, 0x0F0F0F, 0x1F1F1F, 0x2F2F2F, 0x3F3F3F, 0x4B4B4B, 0x5B5B5B, 0x6B6B6B,
    0x7B7B7B, 0x8B8B8B, 0x9B9B9B, 0xABABAB, 0xBBBBBB, 0xCBCBCB, 0xDBDBDB, 0xEBEBEB,
    0x0F0B07, 0x170F0B, 0x1F170B, 0x271B0F, 0x2F2313, 0x372B17, 0x3F2F17, 0x4B371B,
    0x533B1B, 0x5B431F, 0x634B1F, 0x6B531F, 0x73571F, 0x7B5F23, 0x836723, 0x8F6F23,
    0x0B0B0F, 0x13131B, 0x1B1B27, 0x272733, 0x2F2F3F, 0x37374B, 0x3F3F57, 0x474767,
    0x4F4F73, 0x5B5B7F, 0x63638B, 0x6B6B97, 0x7373A3, 0x7B7BAF, 0x8383BB, 0x8B8BCB,
    0x000000, 0x070700, 0x0B0B00, 0x131300, 0x1B1B00, 0x232300, 0x2B2B07, 0x2F2F07,
    0x373707, 0x3F3F07, 0x474707, 0x4B4B0B, 0x53530B, 0x5B5B0B, 0x63630B, 0x6B6B0F,
    0x070000, 0x0F0000, 0x170000, 0x1F0000, 0x270000, 0x2F0000, 0x370000, 0x3F0000,
    0x470000, 0x4F0000, 0x570000, 0x5F0000, 0x670000, 0x6F0000, 0x770000, 0x7F0000,
    0x131300, 0x1B1B00, 0x232300, 0x2F2B00, 0x372F00, 0x433700, 0x4B3B07, 0x574307,
    0x5F4707, 0x6B4B0B, 0x77530F, 0x835713, 0x8B5B13, 0x975F1B, 0xA3631F, 0xAF6723,
    0x231307, 0x2F170B, 0x3B1F0F, 0x4B2313, 0x572B17, 0x632F1F, 0x733723, 0x7F3B2B,
    0x8F4333, 0x9F4F33, 0xAF632F, 0xBF772F, 0xCF8F2B, 0xDFAB27, 0xEFCB1F, 0xFFF31B,
    0x0B0700, 0x1B1300, 0x2B230F, 0x372B13, 0x47331B, 0x533723, 0x633F2B, 0x6F4733,
    0x7F533F, 0x8B5F47, 0x9B6B53, 0xA77B5F, 0xB7876B, 0xC3937B, 0xD3A38B, 0xE3B397,
    0xAB8BA3, 0x9F7F97, 0x937387, 0x8B677B, 0x7F5B6F, 0x775363, 0x6B4B57, 0x5F3F4B,
    0x573743, 0x4B2F37, 0x43272F, 0x371F23, 0x2B171B, 0x231313, 0x170B0B, 0x0F0707,
    0xBB739F, 0xAF6B8F, 0xA35F83, 0x975777, 0x8B4F6B, 0x7F4B5F, 0x734353, 0x6B3B4B,
    0x5F333F, 0x532B37, 0x47232B, 0x3B1F23, 0x2F171B, 0x231313, 0x170B0B, 0x0F0707,
    0xDBC3BB, 0xCBB3A7, 0xBFA39B, 0xAF978B, 0xA3877B, 0x977B6F, 0x876F5F, 0x7B6353,
    0x6B5747, 0x5F4B3B, 0x533F33, 0x433327, 0x372B1F, 0x271F17, 0x1B130F, 0x0F0B07,
    0x6F837B, 0x677B6F, 0x5F7367, 0x576B5F, 0x4F6357, 0x475B4F, 0x3F5347, 0x374B3F,
    0x2F4337, 0x2B3B2F, 0x233327, 0x1F2B1F, 0x172317, 0x0F1B13, 0x0B130B, 0x070B07,
    0xFFF31B, 0xEFDF17, 0xDBCB13, 0xCBB70F, 0xBBA70F, 0xAB970B, 0x9B8307, 0x8B7307,
    0x7B6307, 0x6B5300, 0x5B4700, 0x4B3700, 0x3B2B00, 0x2B1F00, 0x1B0F00, 0x0B0700,
    0x0000FF, 0x0B0BEF, 0x1313DF, 0x1B1BCF, 0x2323BF, 0x2B2BAF, 0x2F2F9F, 0x2F2F8F,
    0x2F2F7F, 0x2F2F6F, 0x2F2F5F, 0x2B2B4F, 0x23233F, 0x1B1B2F, 0x13131F, 0x0B0B0F,
    0x2B0000, 0x3B0000, 0x4B0700, 0x5F0700, 0x6F0F00, 0x7F1707, 0x931F07, 0xA3270B,
    0xB7330F, 0xC34B1B, 0xCF632B, 0xDB7F3B, 0xE3974F, 0xE7AB5F, 0xEFBF77, 0xF7D38B,
    0xA77B3B, 0xB79B37, 0xC7C337, 0xE7E357, 0x7FBFFF, 0xABE7FF, 0xD7FFFF, 0x670000,
    0x8B0000, 0xB30000, 0xD70000, 0xFF0000, 0xFFF393, 0xFFF7C7, 0xFFFFFF, 0x9F5B53
}

function getDefaultPalette()
    local pal = Palette(257);

    for i, hex in ipairs(qPalHex) do
        local r = (hex >> 16) & 0xFF
        local g = (hex >> 8) & 0xFF
        local b = hex & 0xFF
        pal:setColor(i, Color(r,g,b))
    end
    return pal
end

function colorDistance(c1, c2)
    local dr = c1.red - c2.red
    local dg = c1.green - c2.green
    local db = c1.blue - c2.blue
    return dr * dr + dg * dg + db * db
end

function approxColor(c, qPal)
    if (c.alpha < 128) then
        return qPal:getColor(255) -- transparent
    end
    local match = 0
    local dist = colorDistance(c, qPal:getColor(0))
    for i = 2, 255 do
        local newDist = colorDistance(c, qPal:getColor(i - 1))
        if newDist < dist then
            dist = newDist
            match = i - 2
            if newDist < 2 then -- perfect match
                break
            end
        end
    end
    return match
end